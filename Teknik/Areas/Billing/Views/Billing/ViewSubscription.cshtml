@model Teknik.Areas.Billing.ViewModels.SubscriptionViewModel

@{
    var extraUsage = "";
    if (Model.MaxStorage != null)
        extraUsage = $"If you need more than {StringHelper.GetBytesReadable(Model.MaxStorage.Value)} of storage, please contact support for assistance.";

    var storageAllowed = "";
    if (Model.BaseStorage != null)
    {
        storageAllowed = $"{StringHelper.GetBytesReadable(Model.BaseStorage.Value)} Storage";
    }

    var btnClass = "";
    if (Model.CurrentSubMonthly)
    {
        btnClass = "disabled";
    }

    var panelColor = "default";
    var buttonColor = "default";
    var title = "";
    if (Model.Recommended)
    {
        panelColor = "primary";
        buttonColor = "primary";
        title = "Recommended";
    }

    if (Model.CurrentSubMonthly ||
        Model.CurrentSubYearly)
    {
        title = "Current Plan";
    }

    var offset = "";
    if (!string.IsNullOrEmpty(Model.PanelOffset))
        offset = $"col-md-offset-{Model.PanelOffset}";
    <div class="col-sm-6 col-md-3 @offset">
        <div class="thumbnail thumbnail-@panelColor subscription-panel">
            <div class="caption text-center">
                <h4 class="header">@title</h4>
                <h2 class="body">@Html.Raw(storageAllowed)</h2>
                @if (Model.OverageAllowed)
                {
                    var overage = "No Overage Fee";
                    if (Model.OveragePriceMonthly != null)
                    {
                        overage = $"Overage at ${Model.OveragePriceMonthly:0.00} / {Model.OverageUnit}";
                        if (Model.MaxStorage != null)
                            overage += $" <span data-toggle=\"tooltip\" data-placement=\"top\" title=\"{extraUsage}\">(Up to {StringHelper.GetBytesReadable(Model.MaxStorage.Value)})*</span>";
                    }
                    <h5>
                        <small>@Html.Raw(overage)</small>
                    </h5>
                }
                <h4 class="sub-title">@Model.SubscribeText</h4>
                <p><a href="@Model.SubscribeUrlMonthly" class="btn btn-@buttonColor center-block @btnClass" role="button">@(Model.BasePriceMonthly.HasValue ? $"${Model.BasePriceMonthly:0.00} / month" : "Free")</a></p>
                @if (Model.BasePriceYearly != null)
                {
                    var yearBtnClass = "";
                    if (Model.CurrentSubYearly)
                    {
                        yearBtnClass = "disabled";
                    }
                    var discount = 1 - (Model.BasePriceYearly.Value / (Model.BasePriceMonthly.Value * 12));
                    <p>
                        Or prepay annually<br />
                        (save @Math.Round(100 * discount)%):
                    </p>
                    <p><a href="@Model.SubscribeUrlYearly" class="btn btn-default btn-no-border btn-text-primary center-block @yearBtnClass" role="button">@($"${Model.BasePriceYearly:0.00} / year")</a></p>
                }
            </div>
        </div>
    </div>
}
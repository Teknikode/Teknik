@model Teknik.Areas.Help.ViewModels.HelpViewModel

<div class="container">
    <ol class="breadcrumb">
        <li><a href="@Url.SubRouteUrl("help", "Help.Index")">Help Index</a></li>
        <li class="active"><a href="#">Uploads</a></li>
    </ol>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <h2 class="text-center"><b>Uploads</b></h2>
            <hr>
            <h3>Encryption Method</h3>
            <br />
            <h4>Using the Browser (Client Side Encryption)</h4>
            <p>
                When you using the web interface for uploads, the file is loaded using the javascript <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader">FileReader</a> API.
            </p>
            <p>
                Once the file is completely loaded into the buffer, a key and iv are generated by a random string generator to create a key that is <b>@Config.UploadConfig.KeySize Bits</b> and an iv (Block Size) that is <b>@Config.UploadConfig.BlockSize Bits</b>.
                Then the file buffer, key, and iv are passed into a Web Worker for encryption.
            </p>
            <p>
                The file data is passed through a progressive ciphering with a chunk size of <b>@Config.UploadConfig.ChunkSize Bytes</b>.  This is to help reduce the memory usage needed by the encryption process as it only needs to process and convert each chunk instead of the entire file.
            </p>
            <p>
                Once all the file's data has been processed, the final buffer is then passed back to the main encryption routine and is sent to the server as a ArrayBuffer, along with the content-type, generated iv, key size, and block size.
            </p>
            <p>
                Once the data has been recieved by the server, a unique URL name and unique local filename are generated and saved to the database along with the passed up cipher information.  The File Data is then written to the server and the resulting URL is passed back to the client.
            </p>
            <p>
                When the client recieves the returned URL, it then appends the generated key to the URL as an anchor tag and updates the UI to display the final URL.
            </p>
            <br />
            <h3>Cipher Properties</h3>
            <p>
                The encryption library being used is <a href="http://code.google.com/p/crypto-js/">Crypto-JS</a> and the cipher being used is <b>AES-@Config.UploadConfig.KeySize</b> using the mode <b>CTR</b>.  The variant of AES is determined by the size of the key used (128, 192, or 256).
            </p>
            <h3>Upload Requirements</h3>
            <p>
                The maximum file size per upload is <b>@StringHelper.GetBytesReadable(Config.UploadConfig.MaxUploadSize)</b>
            </p>
            <p>
                Each file is scanned for viruses at upload.  If it fails, it will cancel the upload.  Currently only files that are unencrypted when being sent to the server will be scanned successfully for viruses.  If the file is encrypted client side, the encrypted data will be checked.  This could create a false positive, but since the key is randomly generated, the next attempt should not be flagged.
            </p>
        </div>
    </div>
</div>

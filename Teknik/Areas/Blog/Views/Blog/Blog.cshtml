@model Teknik.Areas.Blog.ViewModels.BlogViewModel

<script>
    // We need to define the action URLs for the script
    var uploadURL = '@Url.SubRouteUrl("upload", "Upload.Upload")';
    var helpURL = '@Url.SubRouteUrl("help", "Help.Markdown")';

    var getPostsURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "GetPosts" })';
    var publishPostURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "PublishPost" })';
    var deletePostURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "DeletePost" })';

    var getCommentsURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "GetComments" })';
    var getCommentArticleURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "GetCommentArticle" })';
    var addCommentURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "CreateComment" })';
    var editCommentURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "EditComment" })';
    var deleteCommentURL = '@Url.SubRouteUrl("blog", "Blog.Action", new { action = "DeleteComment" })';
</script>

<bundle src="css/blog.min.css" append-version="true"></bundle>

<div class="container">
    @if (!Model.Error)
    {
        <div class="row">
            <div class="col-sm-12 blog-heading">
                <h1 class="blog-title text-center">@Model.Title</h1>
                <p class="lead blog-description text-center text-muted">@Model.Description</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 text-center">
                <p>
                    <a href="@Url.SubRouteUrl("rss", "RSS.Blog", new { username = (Model.BlogId == Config.BlogConfig.ServerBlogId) ? string.Empty : Model.User.Username })"><i class="fa fa-rss fa-2x fa-border"></i></a>
                </p>
            </div>
        </div>
        if (User.IsInRole("Admin") || (Model.User != null && Model.User.Username == User.Identity.Name))
        {
        <div class="row">
            <div class="col-sm-12 text-center">
                <a href="@Url.SubRouteUrl("blog", "Blog.New", new { username = Model.User.Username, blogID = Model.BlogId })" role="button" class="btn btn-primary">Create Post</a>
            </div>
        </div>
        }

        <bundle src="js/blog.min.js" append-version="true"></bundle>

        if (Model.HasPosts)
        {
            <div class="blog-main" id="@Model.BlogId">
                @foreach (var post in Model.Posts)
                {
                    @await Html.PartialAsync("Post", post)
                }
            </div>
            <script>
                var posts = @Config.BlogConfig.PostsToLoad;
                var start_post = @Model.Posts.Count;

                linkPostDelete('.delete_post');
                linkPostPublish('.publish_post');
                linkPostUnpublish('.unpublish_post');

                $(window).bind('scroll', bindScrollPosts);
            </script>
        }
        else
        {
            <div class="row">
                <div class="col-sm-12 text-center">
                    <h2>There are currently no articles.</h2>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row">
            <div class="col-sm-12 text-center">
                <h2>That blog does not exist!</h2>
            </div>
        </div>
    }
</div>
